# Generated by Django 3.2.10 on 2022-01-07 03:45

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import drf_auth.models
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OTPValidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('otp', models.CharField(max_length=10, verbose_name='OTP Code')),
                ('destination', models.CharField(max_length=150, unique=True, verbose_name='Destination Address (Mobile/Email)')),
                ('is_validated', models.BooleanField(default=False, verbose_name='Is Validated')),
                ('validate_attempt', models.IntegerField(default=3, verbose_name='Attempted Validation')),
                ('prop', models.CharField(choices=[('E', 'Email'), ('M', 'Mobile')], default='E', max_length=1, verbose_name='Destination Property')),
                ('send_counter', models.PositiveIntegerField(default=0, verbose_name='OTP Sent Counter')),
                ('reactive_at', models.DateTimeField(verbose_name='ReActivate Sending OTP')),
            ],
            options={
                'verbose_name': 'OTP Validation',
                'verbose_name_plural': 'OTP Validations',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('mobile', models.CharField(blank=True, db_index=True, max_length=150, null=True, unique=True, verbose_name='Mobile Number')),
                ('name', models.CharField(max_length=500, verbose_name='Full Name')),
                ('image', models.ImageField(blank=True, upload_to=drf_auth.models.auto_unique_upload_image, verbose_name='Profile Photo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
